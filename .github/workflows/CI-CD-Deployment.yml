name: Code and Security Scan

on:
  push:
    branches: [ "main" ]
    tags: [ "infra-*" ] # on infra-Anything only
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:


# SonarQube Scaning Part
jobs:
  code-scan:
    name: SonarQube Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Sonar Scanner
      run: npm install -g sonar-scanner

    - name: Run SonarQube Scan
      run: |
        sonar-scanner \
          -Dsonar.projectKey=my-website-project \
          -Dsonar.organization=my-org \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.sources=./ \
          -Dsonar.language=js,html,css \
          -Dsonar.sourceEncoding=UTF-8
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

# Trivy Security Scaning Part
  security-scan:
    name: Trivy File Scan
    needs: code-scan  # Wait for Docker image build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Trivy
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'filesystem'
        severity: 'HIGH,CRITICAL'
        output: 'trivy-results.json'
        format: 'json'

    - name: Upload Trivy Report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: trivy-results.json

# Docker Image Build and Push 
  build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker Image
      run: |
         docker build -t user-ui:${{ github.run_number }} .

    - name: Run Trivy vulnerability scanner on Docker image
      uses: aquasecurity/trivy-action@0.28.0
      continue-on-error: true
      with:
          image-ref: 'user-ui'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
    - name: Push Docker Image
      run: |
        docker tag user-ui:${{ github.run_number }} aryanatel/user-ui:v19
        docker push aryanatel/user-ui:v19

#Teraform Infrastructure Deployment testing

  terraform-infra:
    name: Deploy AWS Infrastructure
    runs-on: ubuntu-latest
    needs: build-push  # Wait for Docker image build
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref_name, 'infra-')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Validate Terraform
        run: terraform validate
        working-directory: ./terraform

      - name: Plan Infrastructure
        run: terraform plan -out=tfplan
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Apply Infrastructure
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
